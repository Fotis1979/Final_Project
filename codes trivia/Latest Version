************************************************************************************************************************************************************
APP
************************************************************************************************************************************************************
import { useState, useEffect } from 'react';
import './App.css';
import Counter from './components/Counter'
import Timer from './components/Timer';
import QuestionTimer from './components/QuestionTimer'


const App = () => {

  console.log("rendered");
  const [questions, setQuestions] = useState()
  const [message, setMessage] = useState()
  const [color, setColor] = useState()
  const [wrightAnswer, setWrightAnswer] = useState()
  const [score, setScore] = useState(0)
  const [scoreB, setScoreB] = useState(false)


  // *** FUNCTION to render new question on every click. ***

  const AnswerSubmit = (e) => {

    // *** SET TIMEOUT to wait four seconds until the next fetch. ***

    setTimeout(NewQ, 4000)

    //  *** FUNCTION to fetch fifty api question objects and choose one of them randomly. ***

    function NewQ() {

      fetch("https://the-trivia-api.com/api/questions?limit=50")
        .then(res => res.json())
        .then(data => setQuestions((data[Math.floor(Math.random() * 50)])))

      setMessage("")
      setColor("")
      setWrightAnswer("")
    }

    if (e.target.value === questions.correctAnswer) {

       setMessage("WRIGHT ANSWER !!!")
      setWrightAnswer("")
      setColor("green")
    } else {


      setMessage("WRONG ANSWER !!!")
      setColor("tomato")
      e.target.value !== questions.correctAnswer && setWrightAnswer(questions.correctAnswer)
    }
  }

  // *** FUNCTION to shuffle the items of the array in a random order. ***

  function RandomArrayShuffle(array) {
    var currentIndex = array.length, temporaryValue, randomIndex;
    while (0 !== currentIndex) {
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  }


  // *** CONSOLE.LOGS for testing ***
  // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));
  questions && console.log(questions.correctAnswer);
  // questions && console.log(questions.incorrectAnswers);
  // ***************


  // *** PUSH the Correct answer to the incorrect answers array. ***

  questions && questions.incorrectAnswers.length <= 3 && questions.incorrectAnswers.push(questions.correctAnswer)
  questions && RandomArrayShuffle(questions.incorrectAnswers)


  // *** CONSOLE.LOGS for testing ***
  // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));
  // questions && console.log(questions.correctAnswer);
  // questions && console.log(questions.incorrectAnswers);
  // ***************

  return (

    <main>

      {questions && <Counter scoreB={scoreB} setScoreB={setScoreB} questions={questions} score={score} setScore={setScore} color={color} />}

      {questions && <QuestionTimer setQuestions={setQuestions} setWrightAnswer={setWrightAnswer} setColor={setColor} setMessage={setMessage} message={message} />}
      {questions && <Timer score={score} setScore={setScore} setQuestions={setQuestions} setMessage={setMessage} />}

      <br /><br />

      <div className="canvas">

        <h1>Questions Quiz</h1>

        <br /><br />
        {questions && <h2> CATEGORY:{" " + questions.category}</h2>}

        <br /><br />

        {questions && <div className="question"> {questions.question}</div>}

        <br /> <br />

        {<aside className="questions-section">

          {questions &&
            <button style={{ backgroundColor: `${color}` }} id={questions.id} value={questions.incorrectAnswers[0]} onClick={(e) => AnswerSubmit(e)}>{questions.incorrectAnswers[0]}</button>
          }

          {questions &&
            <button style={{ backgroundColor: `${color}` }} id={questions.id} value={questions.incorrectAnswers[1]} onClick={(e) => AnswerSubmit(e)}> {questions.incorrectAnswers[1]}</button>
          }

          {questions &&
            <button style={{ backgroundColor: `${color}` }} id={questions.id} value={questions.incorrectAnswers[2]} onClick={(e) => AnswerSubmit(e)}> {questions.incorrectAnswers[2]}</button>
          }

          {questions &&
            <button style={{ backgroundColor: `${color}` }} id={questions.id} value={questions.incorrectAnswers[3]} onClick={(e) => AnswerSubmit(e)}> {questions.incorrectAnswers[3]}</button>
          }
          {!questions && <button onClick={AnswerSubmit}>
            START QUIZ</button>}

          <br /><br />

          {message &&
            <div className="w">
              <p style={{ color: `${color}` }}>{message} </p>
            </div>}

          {wrightAnswer &&
            <p className="answer-display">{wrightAnswer !== "" && questions && "Wright Answer : " + wrightAnswer}</p>}

        </aside>
        }
      </div>
    </main>
  );
}

export default App;






************************************************************************************************************************************************************
COUNTER 
************************************************************************************************************************************************************

import React from 'react'
import { useEffect } from 'react'

const Counter = ({score, setScore, color}) => {

console.log(color);

useEffect (() => {
  
  color === "green" && setScore((prev) => prev +10)

},[color])


return (
    <div className="Counter">

      <label>SCORE : </label>
      <span>{score}</span>
      
    </div>
  )
}

export default Counter




************************************************************************************************************************************************************
CSS
************************************************************************************************************************************************************
    *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    main {
        display: flex;
        flex-direction: row;
         }


    .canvas{
        position: absolute;
        width: 100%;
        padding-top: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .question {
        border: 3px solid red;
        padding: 30px;
        text-align: center;
        font-size: 40px;
        width: 80%;
    }


    button {
        margin: 10px;
        width: 80%;
        height: 100%;
        font-size: 40px;
        
    }


    .questions-section{
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 70%;
        height: 100%;
        padding-top: 55px;
        padding-bottom: 30px;
        background: linear-gradient(#e6dd64, #3b8361); 
        justify-content: center;
        border: 3px solid;
        border-radius: 10px;
    }

    form {
        width: 800px;
        height: 300px;
        border: 1px solid;
    }

    .answer-display {
        padding-top: 10px;
        margin: 5px;
        font-size: 40px;
        width: 800px;
        height: 80px;
        text-align: center;   
        background: linear-gradient(#f3f2e9, #b7c597);
        justify-content: center;

    }
    .w{
        width: 800px;
        height: 60px;
        border: 1px solid;
        text-align: center;
        padding-top: 10px;    
        background: linear-gradient(#f3f2e9, #b7c597);
        justify-content: center;
    }

    p{
        font-size: 30px;
        font-weight: bold;
        color: royalblue;
        
    }

    .Counter{
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 30px;
        border: deeppink 1px solid;
        border-radius: 40px;
        position: absolute;
        width: 350px;
        height: 70px;
        color: rgb(19, 5, 5);
        background: linear-gradient(#87d2df, #97a2c5);
        font-size: 60px;
        font-weight:lighter;
    }

    .timer{        
        padding-top: 55px;
        font-style: italic;
        font-size: 30px;
        font-weight:lighter;
        margin-left: 1100px;
        display: flex;
        flex-direction: column;
        width: 300px;
        align-items: center;
    }

    .question-timer{
        margin-top: 650px;
        margin-left: 40px;
        padding-top: 80px;
        display: flex;
        font-style: impact;
        font-size: 55px;
        font-weight: bold;
        flex-direction: column;
        width: 300px;
        text-align: center;
    }

    .sec{
        position: relative;
        top: 25px;
        animation: bounce .3s ease infinite alternate;
        font-family: 'Titan One', cursive;
        font-size: 80px;
        color: rgb(114, 35, 35);
        text-shadow: 0 1px 0 rgb(104, 21, 21),
      }

        @keyframes bounce {
            100% {
              top: -20px;
             }
          }
    


************************************************************************************************************************************************************
TIMER
************************************************************************************************************************************************************


import React from 'react'
import { useEffect } from 'react'
import { useState } from 'react'



const Timer = ({ setQuestions , score, setScore, setMessage}) => {

    const [seconds, setSeconds] = useState(0)
    const [minutes, setMinutes] = useState(0)
    const [hours, setHours] = useState(0)
    const [hoursO, setHoursO] = useState(0)
    const [minutesO, setMinutesO] = useState(0)
    const [secondsO, setSecondsO] = useState(0)




    useEffect(() => {

        function incrementSeconds() {
            setSeconds((prev) => (prev + 1))

        } setInterval(incrementSeconds, 1000);


    }, [])


    useEffect(() => {

        function incrementMinutes() {
            setMinutes((prev) => (prev + 1))
        } setInterval(incrementMinutes, 60000);

        minutes === 5 && setMinutes(0)
    }, [])
    useEffect(() => {
        seconds === 10 && setSecondsO("")
        seconds === 60 && setSeconds(0)
        seconds === 60 && setSecondsO(0)
        minutes === 3 && setQuestions("")
        minutes === 3 && setScore(0)
        minutes === 3 && setMessage("")

       console.log(score);


    }, [seconds])

    return (
        <div>

            <div className="timer">
                <span>Game Ends in 3* mins </span>
                {hoursO}{hours}:{minutesO}{minutes}:{secondsO}{seconds}</div>

        </div>
    )
}

export default Timer

************************************************************************************************************************************************************
QUESTION_TIMER
************************************************************************************************************************************************************



import React from 'react'
import { useEffect } from 'react'
import { useState } from 'react'


const QuestionTimer = ({ setQuestions, setWrightAnswer, setColor, setMessage, message }) => {

    const [seconds, setSeconds] = useState(0)
    const [minutes, setMinutes] = useState(0)
    const [minutesO, setMinutesO] = useState(0)
    const [secondsO, setSecondsO] = useState(0)
    const [newQuestion, setNewQuestion] = useState(false)


    useEffect(() => {

        function incrementSeconds() {
            setSeconds((prev) => (prev + 1))

        } setInterval(incrementSeconds, 1000);


    }, [])

    useEffect(() => {
        seconds === 10 && setSecondsO("")
        seconds === 16 && setSeconds(0)
        seconds === 16 && setNewQuestion(true)
        seconds === 0 && setNewQuestion(false)
        message && setSeconds(0)


    }, [seconds, setSeconds, setSecondsO])

    useEffect(() => {
        fetch("https://the-trivia-api.com/api/questions?limit=50")
            .then(res => res.json())
            .then(data => setQuestions((data[Math.floor(Math.random() * 50)])))

        setMessage("")
        setColor("")
        setWrightAnswer("")
    }, [newQuestion])

    return (
        <div className="question-timer">

            <span style={{ fontSize: "20px" , paddingBottom: "20px"}}>15secs for a Question !</span>

            <span className="sec">{seconds}</span>

        </div>
    )
}

export default QuestionTimer
