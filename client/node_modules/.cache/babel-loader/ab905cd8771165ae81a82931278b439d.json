{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionBody.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\nimport Answers from \"./Answers\";\nimport Counter from \"./Counter\";\nimport QuestionCounter from \"./QuestionCounter\";\nimport QuestionTimer from \"./QuestionTimer\";\nimport Timer from \"./Timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QuestionBody = () => {\n  _s();\n\n  const context = useContext(MyContext);\n  const {\n    questions,\n    setQuestions,\n    message,\n    setMessage,\n    color,\n    setColor,\n    wrightAnswer,\n    setWrightAnswer,\n    score,\n    setScore,\n    newQuestion,\n    setNewQuestion,\n    gameOver,\n    setGameOver,\n    g,\n    setG\n  } = context;\n\n  const AnswerSubmit = e => {\n    e.preventDefault(); // *** SET TIMEOUT to wait four seconds until the next fetch. ***\n\n    setTimeout(NewQ, 4000); //  *** FUNCTION to fetch fifty api question objects and choose one of them randomly. ***\n\n    function NewQ() {\n      // console.log(\"fetched\");\n      !color && fetch(\"https://the-trivia-api.com/api/questions?limit=50&difficulty=hard\").then(res => res.json()).then(data => setQuestions(data[Math.floor(Math.random()) * 50]));\n      setMessage(\"\");\n      setColor(\"\");\n      setWrightAnswer(\"\");\n    }\n\n    if (e.target.value === questions.correctAnswer) {\n      setMessage(\"WRIGHT ANSWER !!!\");\n      setWrightAnswer(\"\");\n      setColor(\"green\");\n    } else {\n      setMessage(\"WRONG ANSWER !!!\");\n      setColor(\"tomato\");\n      e.target.value !== questions.correctAnswer && setWrightAnswer(questions.correctAnswer);\n    }\n  };\n\n  const LockButtons = () => {\n    color ? setG(true) : setG(false);\n  };\n\n  useEffect(() => {\n    LockButtons();\n  }, [color]);\n  console.log(g); // *** FUNCTION to shuffle the items of the array in a random order. ***\n\n  function RandomArrayShuffle(array) {\n    var currentIndex = questions.incorrectAnswers.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = questions.incorrectAnswers[currentIndex];\n      questions.incorrectAnswers[currentIndex] = questions.incorrectAnswers[randomIndex];\n      questions.incorrectAnswers[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  } // *** CONSOLE.LOGS for testing ***\n  // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));\n  // questions && console.log(questions.incorrectAnswers);\n  // ***************\n  // *** PUSH the Correct answer to the incorrect answers array and shuffle the array running the shuffleArray function in the end. ***\n\n\n  questions && questions.incorrectAnswers.length === 3 && questions.incorrectAnswers.push(questions.correctAnswer) && RandomArrayShuffle();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(QuestionCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Answers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QuestionBody, \"wqnYpdjMkT3eDhbBjwDmfBO/TFg=\");\n\n_c = QuestionBody;\nexport default QuestionBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionBody\");","map":{"version":3,"sources":["/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionBody.jsx"],"names":["React","useContext","useEffect","MyContext","Answers","Counter","QuestionCounter","QuestionTimer","Timer","QuestionBody","context","questions","setQuestions","message","setMessage","color","setColor","wrightAnswer","setWrightAnswer","score","setScore","newQuestion","setNewQuestion","gameOver","setGameOver","g","setG","AnswerSubmit","e","preventDefault","setTimeout","NewQ","fetch","then","res","json","data","Math","floor","random","target","value","correctAnswer","LockButtons","console","log","RandomArrayShuffle","array","currentIndex","incorrectAnswers","length","temporaryValue","randomIndex","push"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\nimport Answers from \"./Answers\";\nimport Counter from \"./Counter\";\nimport QuestionCounter from \"./QuestionCounter\";\nimport QuestionTimer from \"./QuestionTimer\";\nimport Timer from \"./Timer\";\nconst QuestionBody = () => {\n  const context = useContext(MyContext);\n  const {\n    questions,\n    setQuestions,\n    message,\n    setMessage,\n    color,\n    setColor,\n    wrightAnswer,\n    setWrightAnswer,\n    score,\n    setScore,\n    newQuestion,\n    setNewQuestion,\n    gameOver,\n    setGameOver,\n    g,\n    setG,\n  } = context;\n  const AnswerSubmit = (e) => {\n    e.preventDefault();\n\n    // *** SET TIMEOUT to wait four seconds until the next fetch. ***\n\n    setTimeout(NewQ, 4000);\n\n    //  *** FUNCTION to fetch fifty api question objects and choose one of them randomly. ***\n\n    function NewQ() {\n      // console.log(\"fetched\");\n      !color &&\n        fetch(\n          \"https://the-trivia-api.com/api/questions?limit=50&difficulty=hard\"\n        )\n          .then((res) => res.json())\n          .then((data) => setQuestions(data[Math.floor(Math.random()) * 50]));\n\n      setMessage(\"\");\n      setColor(\"\");\n      setWrightAnswer(\"\");\n    }\n\n    if (e.target.value === questions.correctAnswer) {\n      setMessage(\"WRIGHT ANSWER !!!\");\n      setWrightAnswer(\"\");\n      setColor(\"green\");\n    } else {\n      setMessage(\"WRONG ANSWER !!!\");\n      setColor(\"tomato\");\n      e.target.value !== questions.correctAnswer &&\n        setWrightAnswer(questions.correctAnswer);\n    }\n  };\n\n  const LockButtons = () => {\n    color ? setG(true) : setG(false);\n  };\n  useEffect(() => {\n    LockButtons();\n  }, [color]);\n\n  console.log(g);\n\n  // *** FUNCTION to shuffle the items of the array in a random order. ***\n  function RandomArrayShuffle(array) {\n    var currentIndex = questions.incorrectAnswers.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = questions.incorrectAnswers[currentIndex];\n      questions.incorrectAnswers[currentIndex] =\n        questions.incorrectAnswers[randomIndex];\n      questions.incorrectAnswers[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n\n  // *** CONSOLE.LOGS for testing ***\n  // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));\n  // questions && console.log(questions.incorrectAnswers);\n  // ***************\n\n  // *** PUSH the Correct answer to the incorrect answers array and shuffle the array running the shuffleArray function in the end. ***\n\n  questions &&\n    questions.incorrectAnswers.length === 3 &&\n    questions.incorrectAnswers.push(questions.correctAnswer) &&\n    RandomArrayShuffle();\n\n  return (\n    <>\n      <QuestionCounter />\n      <QuestionTimer />\n      <Timer />\n      <Counter />\n      <Answers />\n    </>\n  );\n};\n\nexport default QuestionBody;\n"]},"metadata":{},"sourceType":"module"}