{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionTimer.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState, useContext } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionTimer = () => {\n  _s();\n\n  const context = useContext(MyContext);\n  const {\n    setQuestions,\n    message,\n    setMessage,\n    setColor,\n    setRightAnswer,\n    newQuestion,\n    setNewQuestion\n  } = context;\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    function incrementSeconds() {\n      setSeconds(prev => prev + 1);\n    }\n\n    setInterval(incrementSeconds, 1000);\n  }, []);\n  useEffect(() => {\n    seconds === 16 && setSeconds(0);\n    seconds === 2 && setNewQuestion(true);\n    seconds <= 15 && setNewQuestion(false);\n    message && setSeconds(0);\n  }, [seconds]);\n  useEffect(() => {\n    newQuestion && fetch(\"https://the-trivia-api.com/api/questions?limit=50&difficulty=medium\").then(res => res.json()).then(data => setQuestions(data[Math.floor(Math.random() * 50)]));\n    setMessage(\"\");\n    setColor(\"\");\n    setRightAnswer(\"\");\n  }, [newQuestion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"sec\",\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        fontSize: \"20px\",\n        paddingTop: \"20px\"\n      },\n      children: \"U have 15 secs for each Question !\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionTimer, \"5gwFyNCOyzTGEbtLaS7PZsvBTpE=\");\n\n_c = QuestionTimer;\nexport default QuestionTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionTimer\");","map":{"version":3,"names":["React","useEffect","useState","useContext","MyContext","QuestionTimer","context","setQuestions","message","setMessage","setColor","setRightAnswer","newQuestion","setNewQuestion","seconds","setSeconds","incrementSeconds","prev","setInterval","fetch","then","res","json","data","Math","floor","random","fontSize","paddingTop"],"sources":["/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionTimer.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useState, useContext } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\n\nconst QuestionTimer = () => {\n  const context = useContext(MyContext);\n  const {\n    setQuestions,\n    message,\n    setMessage,\n\n    setColor,\n    setRightAnswer,\n\n    newQuestion,\n    setNewQuestion,\n  } = context;\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    function incrementSeconds() {\n      setSeconds((prev) => prev + 1);\n    }\n    setInterval(incrementSeconds, 1000);\n  }, []);\n\n  useEffect(() => {\n    seconds === 16 && setSeconds(0);\n    seconds === 2 && setNewQuestion(true);\n    seconds <= 15 && setNewQuestion(false);\n    message && setSeconds(0);\n  }, [seconds]);\n\n  useEffect(() => {\n    newQuestion &&\n      fetch(\n        \"https://the-trivia-api.com/api/questions?limit=50&difficulty=medium\"\n      )\n        .then((res) => res.json())\n        .then((data) => setQuestions(data[Math.floor(Math.random() * 50)]));\n\n    setMessage(\"\");\n    setColor(\"\");\n    setRightAnswer(\"\");\n  }, [newQuestion]);\n\n  return (\n    <div className=\"question-timer\">\n      <span className=\"sec\">{seconds}</span>\n\n      <span style={{ fontSize: \"20px\", paddingTop: \"20px\" }}>\n        U have 15 secs for each Question !\n      </span>\n    </div>\n  );\n};\n\nexport default QuestionTimer;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;EAAA;;EAC1B,MAAMC,OAAO,GAAGH,UAAU,CAACC,SAAD,CAA1B;EACA,MAAM;IACJG,YADI;IAEJC,OAFI;IAGJC,UAHI;IAKJC,QALI;IAMJC,cANI;IAQJC,WARI;IASJC;EATI,IAUFP,OAVJ;EAWA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,CAAD,CAAtC;EAEAD,SAAS,CAAC,MAAM;IACd,SAASe,gBAAT,GAA4B;MAC1BD,UAAU,CAAEE,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAV;IACD;;IACDC,WAAW,CAACF,gBAAD,EAAmB,IAAnB,CAAX;EACD,CALQ,EAKN,EALM,CAAT;EAOAf,SAAS,CAAC,MAAM;IACda,OAAO,KAAK,EAAZ,IAAkBC,UAAU,CAAC,CAAD,CAA5B;IACAD,OAAO,KAAK,CAAZ,IAAiBD,cAAc,CAAC,IAAD,CAA/B;IACAC,OAAO,IAAI,EAAX,IAAiBD,cAAc,CAAC,KAAD,CAA/B;IACAL,OAAO,IAAIO,UAAU,CAAC,CAAD,CAArB;EACD,CALQ,EAKN,CAACD,OAAD,CALM,CAAT;EAOAb,SAAS,CAAC,MAAM;IACdW,WAAW,IACTO,KAAK,CACH,qEADG,CAAL,CAGGC,IAHH,CAGSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAHjB,EAIGF,IAJH,CAISG,IAAD,IAAUhB,YAAY,CAACgB,IAAI,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAL,CAJ9B,CADF;IAOAjB,UAAU,CAAC,EAAD,CAAV;IACAC,QAAQ,CAAC,EAAD,CAAR;IACAC,cAAc,CAAC,EAAD,CAAd;EACD,CAXQ,EAWN,CAACC,WAAD,CAXM,CAAT;EAaA,oBACE;IAAK,SAAS,EAAC,gBAAf;IAAA,wBACE;MAAM,SAAS,EAAC,KAAhB;MAAA,UAAuBE;IAAvB;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAM,KAAK,EAAE;QAAEa,QAAQ,EAAE,MAAZ;QAAoBC,UAAU,EAAE;MAAhC,CAAb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAnDD;;GAAMvB,a;;KAAAA,a;AAqDN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}