{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionBodyWithTime.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\nimport Answers from \"./Answers\";\nimport Counter from \"./Counter\";\nimport QuestionCounter from \"./QuestionCounter\";\nimport QuestionTimer from \"./QuestionTimer\";\nimport Timer from \"./Timer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuestionBody = () => {\n  _s();\n\n  const context = useContext(MyContext);\n  const {\n    questions,\n    color,\n    g,\n    setG\n  } = context; // const LockButtons = () => {\n  //   color ? setG(true) : setG(false);\n  // };\n  // useEffect(() => {\n  //   LockButtons();\n  // }, [color]);\n  // // *** FUNCTION to shuffle the items of the array in a random order. ***\n  // function RandomArrayShuffle(array) {\n  //   var currentIndex = questions.incorrectAnswers.length,\n  //     temporaryValue,\n  //     randomIndex;\n  //   while (0 !== currentIndex) {\n  //     randomIndex = Math.floor(Math.random() * currentIndex);\n  //     currentIndex -= 1;\n  //     temporaryValue = questions.incorrectAnswers[currentIndex];\n  //     questions.incorrectAnswers[currentIndex] =\n  //       questions.incorrectAnswers[randomIndex];\n  //     questions.incorrectAnswers[randomIndex] = temporaryValue;\n  //   }\n  //   return array;\n  // }\n  // // *** CONSOLE.LOGS for testing ***\n  // // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));\n  // // questions && console.log(questions.incorrectAnswers);\n  // // ***************\n  // // *** PUSH the Correct answer to the incorrect answers array and shuffle the array running the shuffleArray function in the end. ***\n  // questions &&\n  //   questions.incorrectAnswers.length === 3 &&\n  //   questions.incorrectAnswers.push(questions.correctAnswer) &&\n  //   RandomArrayShuffle();\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Answers, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuestionTimer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuestionBody, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c = QuestionBody;\nexport default QuestionBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionBody\");","map":{"version":3,"sources":["/home/user/Desktop/Final_Project/client/src/components/singleplayer/question/QuestionBodyWithTime.jsx"],"names":["React","useContext","useEffect","MyContext","Answers","Counter","QuestionCounter","QuestionTimer","Timer","QuestionBody","context","questions","color","g","setG"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGT,UAAU,CAACE,SAAD,CAA1B;AACA,QAAM;AACJQ,IAAAA,SADI;AAGJC,IAAAA,KAHI;AAKJC,IAAAA,CALI;AAMJC,IAAAA;AANI,MAOFJ,OAPJ,CAFyB,CAWzB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAxDD;;GAAMD,Y;;KAAAA,Y;AA0DN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport MyContext from \"../../../context/MyContext\";\nimport Answers from \"./Answers\";\nimport Counter from \"./Counter\";\nimport QuestionCounter from \"./QuestionCounter\";\nimport QuestionTimer from \"./QuestionTimer\";\nimport Timer from \"./Timer\";\nconst QuestionBody = () => {\n  const context = useContext(MyContext);\n  const {\n    questions,\n\n    color,\n\n    g,\n    setG,\n  } = context;\n\n  // const LockButtons = () => {\n  //   color ? setG(true) : setG(false);\n  // };\n  // useEffect(() => {\n  //   LockButtons();\n  // }, [color]);\n\n  // // *** FUNCTION to shuffle the items of the array in a random order. ***\n  // function RandomArrayShuffle(array) {\n  //   var currentIndex = questions.incorrectAnswers.length,\n  //     temporaryValue,\n  //     randomIndex;\n\n  //   while (0 !== currentIndex) {\n  //     randomIndex = Math.floor(Math.random() * currentIndex);\n  //     currentIndex -= 1;\n  //     temporaryValue = questions.incorrectAnswers[currentIndex];\n  //     questions.incorrectAnswers[currentIndex] =\n  //       questions.incorrectAnswers[randomIndex];\n  //     questions.incorrectAnswers[randomIndex] = temporaryValue;\n  //   }\n  //   return array;\n  // }\n\n  // // *** CONSOLE.LOGS for testing ***\n  // // questions && console.log(questions.incorrectAnswers.indexOf(questions.correctAnswer));\n  // // questions && console.log(questions.incorrectAnswers);\n  // // ***************\n\n  // // *** PUSH the Correct answer to the incorrect answers array and shuffle the array running the shuffleArray function in the end. ***\n\n  // questions &&\n  //   questions.incorrectAnswers.length === 3 &&\n  //   questions.incorrectAnswers.push(questions.correctAnswer) &&\n  //   RandomArrayShuffle();\n\n  return (\n    <main>\n      <Answers />\n      <QuestionCounter />\n      <QuestionTimer />\n      <Timer />\n      <Counter />\n    </main>\n  );\n};\n\nexport default QuestionBody;\n"]},"metadata":{},"sourceType":"module"}